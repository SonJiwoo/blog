---
collapsible: false
date: "2021-02-21T10:08:56+09:00"
description: null
draft: false
title: purrr
weight: 2
---

# purrr 패키지 훑어보기
purrr는 R에서 깔끔하게 반복 작업 처리하는 패키지입니다. Purrr 을 이용하면 반복작업을 Apply family 에 비해 더욱 직관적이고 쉽게 할 수 있습니다. purrr는 고양이 울음소리와 R의 합성어로, 로고는 아래와 같습니다.
```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```
![purrr logo](images/posts/r/purrr/purrr.jpg)

## 목차
1. map, map2
2. pmap, invoke_map
3. rerun
4. every, some, none
5. reduce, accumulate

---

#### map, map2
{{< expand "map, map2 예시" >}}
```{r}
num <- c(1,2,4,5,7)
num2 <- c(3,5,6,8,9)

#list
map(num, function(x){x^2})
map2(num, num2, sum)

#numeric vector
map_dbl(num, function(x){x^2})
map2_dbl(num, num2, sum)
```
{{< /expand >}}

{{<expand "map 실전활용- iris data">}}
```{r}
n_iris <- iris %>%
  group_by(Species) %>%
  nest()

mod_fun <- function(df){
  lm(Sepal.Length ~ ., data = df)
  }
  
m_iris <- n_iris %>%
  mutate(model = map(data, mod_fun))

b_fun <- function(mod){
  coefficients(mod)[[1]]
}

m_iris %>% transmute(Species, beta = map_dbl(model, b_fun))
```
{{</expand>}}
![map](images/posts/r/purrr/map_example.PNG)

---

#### pmap, invoke_map
{{< expand "pmap, invoke_map 예시" >}}
```{r}
x <- list(3, 6, 9)
y <- list(10, 21, 30)
z <- list(100, 200, 300)

# pmap은 3개 이상의 리스트일 때 사용한다.
pmap(list(x, y, z), sum)

# invoke_map은 각각의 리스트에 다른 함수를 적용시키고 싶을 때 활용한다.
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
```
{{< /expand >}}

---

#### rerun
rerun은 샘플 데이터를 **리스트** 형식으로 형성하는 데에 효율적인 방법이다.
{{< expand "rerun 예시" >}}
```{r}
# 예시
set.seed(2021)
a <- 10 %>% 
  rerun(rnorm(5))
a

# 위 함수는 아래의 함수와 같은 결과를 산출함을 알 수 있다.
set.seed(2021)
b <- list()
for(i in 1:10){
  b[[i]] <- rnorm(5)
  print(b[i])
}

for(i in 1:10){
  print(a[[i]] == b[[i]])
}

# 참고로, base에 있는 replicate와 어떻게 다른지 한번 살펴보자!
replicate(10, rnorm(5))

typeof(a)
typeof(replicate(10, rnorm(5)))
```
{{< /expand >}}

#### every, some, none
**리스트**형식을 summarise하는 데에 효율적인 방법이다.
{{<expand "every, some, none 예시">}}
```{r}
y <- list(0:10, 5.5)
y

y %>% every(is.numeric)
y %>% every(is.integer)
y %>% some(is.integer)
y %>% none(is.character)
```
{{</expand>}}

#### reduce, accumulate
함수를 재귀적으로(recursively) 적용시키는 효율적인 방법이다.
{{<expand "reduce, accumulate 예시">}}
```{r}
#1. reduce:
reduce(1:10, sum)

#2. accumulate
accumulate(1:10, sum)

#reduce 응용 버전
paste2 <- function(x, y, sep = ".") paste(x, y, sep = sep)
letters[1:4] %>% reduce(paste2)
```
{{</expand>}}
