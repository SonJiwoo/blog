---
collapsible: false
date: "2021-02-21T10:08:56+09:00"
description: null
draft: false
title: purrr
weight: 2
---

# purrr 패키지 훑어보기
purrr는 R에서 깔끔하게 반복 작업 처리하는 패키지입니다. Purrr 을 이용하면 반복작업을 Apply family 에 비해 더욱 직관적이고 쉽게 할 수 있습니다. purrr는 고양이 울음소리와 R의 합성어로, 로고는 아래와 같습니다.

```r
library(purrr)
```
![purrr logo](images/posts/r/purrr.jpg)

## 목차
1. map, map2
2. pmap, invoke_map
3. rerun

---

#### map, map2

```r
num <- c(1,2,4,5,7)
num2 <- c(3,5,6,8,9)

#list
map(num, function(x){x^2})
```

```
## [[1]]
## [1] 1
## 
## [[2]]
## [1] 4
## 
## [[3]]
## [1] 16
## 
## [[4]]
## [1] 25
## 
## [[5]]
## [1] 49
```

```r
map2(num, num2, sum)
```

```
## [[1]]
## [1] 4
## 
## [[2]]
## [1] 7
## 
## [[3]]
## [1] 10
## 
## [[4]]
## [1] 13
## 
## [[5]]
## [1] 16
```

```r
#numeric vector
map_dbl(num, function(x){x^2})
```

```
## [1]  1  4 16 25 49
```

```r
map2_dbl(num, num2, sum)
```

```
## [1]  4  7 10 13 16
```

---

#### pmap, invoke_map

```r
x <- list(3, 6, 9)
y <- list(10, 21, 30)
z <- list(100, 200, 300)

# pmap은 3개 이상의 리스트일 때 사용한다.
pmap(list(x, y, z), sum)
```

```
## [[1]]
## [1] 113
## 
## [[2]]
## [1] 227
## 
## [[3]]
## [1] 339
```

```r
# invoke_map은 각각의 리스트에 다른 함수를 적용시키고 싶을 때 활용한다.
invoke_map(list(runif, rnorm), list(list(n = 10), list(n = 5)))
```

```
## [[1]]
##  [1] 0.5218707 0.4573010 0.1336987 0.9752903 0.7704996 0.1263337 0.9355054
##  [8] 0.8519589 0.4113298 0.2765038
## 
## [[2]]
## [1] -1.0007500  0.4366478 -0.1302138  0.8097057  0.5093957
```

---

#### rerun

```r
# rerun은 샘플 데이터를 형성하는 데에 효율적인 방법이다.

# 예시
set.seed(2021)
b <- 10 %>% 
  rerun(rnorm(5))
b
```

```
## [[1]]
## [1] -0.1224600  0.5524566  0.3486495  0.3596322  0.8980537
## 
## [[2]]
## [1] -1.92256952  0.26174436  0.91556637  0.01377194  1.72996316
## 
## [[3]]
## [1] -1.0822049 -0.2728252  0.1819954  1.5085418  1.6044701
## 
## [[4]]
## [1] -1.841476  1.623310  0.131389  1.481122  1.513318
## 
## [[5]]
## [1] -0.9424433 -0.1856850 -1.1011246  1.2081153 -1.6249385
## 
## [[6]]
## [1]  0.10537833 -1.45544335 -0.35401614 -0.09370004  1.10066863
## 
## [[7]]
## [1] -1.9638251 -1.4479444  1.0194434 -1.4214171 -0.6045321
## 
## [[8]]
## [1] -1.58347390 -1.28593235 -1.45468488 -0.08707112  0.50473644
## 
## [[9]]
## [1]  0.11638871  1.76021373 -0.34511646  2.12000016 -0.03437749
## 
## [[10]]
## [1] -0.7921541  1.4755152 -0.7255572  0.3123790  0.6919641
```

```r
# 위 함수는 아래의 함수와 같은 결과를 산출함을 알 수 있다.
set.seed(2021)
a <- list()
for(i in 1:10){
  a[[i]] <- rnorm(5)
  print(a[i])
}
```

```
## [[1]]
## [1] -0.1224600  0.5524566  0.3486495  0.3596322  0.8980537
## 
## [[1]]
## [1] -1.92256952  0.26174436  0.91556637  0.01377194  1.72996316
## 
## [[1]]
## [1] -1.0822049 -0.2728252  0.1819954  1.5085418  1.6044701
## 
## [[1]]
## [1] -1.841476  1.623310  0.131389  1.481122  1.513318
## 
## [[1]]
## [1] -0.9424433 -0.1856850 -1.1011246  1.2081153 -1.6249385
## 
## [[1]]
## [1]  0.10537833 -1.45544335 -0.35401614 -0.09370004  1.10066863
## 
## [[1]]
## [1] -1.9638251 -1.4479444  1.0194434 -1.4214171 -0.6045321
## 
## [[1]]
## [1] -1.58347390 -1.28593235 -1.45468488 -0.08707112  0.50473644
## 
## [[1]]
## [1]  0.11638871  1.76021373 -0.34511646  2.12000016 -0.03437749
## 
## [[1]]
## [1] -0.7921541  1.4755152 -0.7255572  0.3123790  0.6919641
```

```r
for(i in 1:10){
  print(a[[i]] == b[[i]])
}
```

```
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
## [1] TRUE TRUE TRUE TRUE TRUE
```

