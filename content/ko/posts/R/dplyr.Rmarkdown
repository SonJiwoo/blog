---
collapsible: false
date: "2021-02-21T10:08:56+09:00"
description: null
draft: false
title: dplyr
weight: 2
---

# dplyr 패키지 훑어보기
```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(MASS)
```

# 목차
1. rowwise
1-1. pmax
2. slice
3. relocate
4. lag, lead

### 데이터
{{< expand "data" >}}
```{r tmp & survey}
tmp <- tibble(x=round(rnorm(n=5, mean=5, sd=1)),
       y=round(rnorm(n=5, mean=5, sd=3)),
       z=round(rnorm(n=5, mean=5, sd=5)))
tmp

data(survey)
glimpse(survey)
```
{{< /expand >}}

#### 1. rowwise()
행별로 최대값 구하기
{{< expand "rowwise 예시" >}}
```{r}
#올바른 버전
tmp %>%
  rowwise() %>% 
  mutate(max = max(x,y,z))

#잘못된 버전
tmp %>%
  mutate(max = max(x,y,z))
```
{{< /expand >}}

#### 1-1. pmax
그런데 사실은 여기서 `rowwise`를 사용하지 않고, `pmax`를 사용하면 보다 간단하게 구할 수 있기도 하다.
{{< expand "pmax 예시" >}}
```{r}
#간단한 버전
tmp %>% 
  mutate(max = pmax(x,y,z))
```
{{< /expand >}}

#### 2. slice()
행 선택
{{<expand "slice 예시">}}
```{r}
# choose 10 rows with smallest 10 pulse values.
survey %>%
  slice_min(Pulse, n = 10)
# choose 10 columns with greatest 10 pulses values.
survey %>%
  slice_max(Pulse, n = 10)
# randomly select 10 rows.
survey %>%
  slice_sample(n = 10)
# randomly select 10% of the data observations.
survey %>%
  slice_sample(prop = .05)
```
{{</expand>}}

#### 3. relocate()
relocate: changes the order of the columns.
{{<expand "relocate 예시">}}
```{r}
# move columns with factor variables to the front
survey %>%
  relocate(where(is.factor)) %>% colnames()
# move Pulse before Height
survey %>%
  relocate(Pulse, .before = Height) %>% colnames()
# move Pulse to the end
survey %>%
  relocate(Pulse, .after = last_col()) %>% colnames()
```
{{</expand>}}

#### 4. lag(), lead()
{{<expand "lag, lead 예시">}}
```{r}
lag(1:5)
lag(1:5, n = 2)
lag(1:5, default = 0)

lead(1:5)
lead(1:5, default = 6)
```
{{</expand>}}

#### 5. between(), near()
{{<expand "between, near 예시">}}
```{r}
# between: >=, <= 조건을 한번에 사용하기
between(1:12, 7, 9)

# near: ==의 안전한 버전(특히 소수점 계산시)
sqrt(2) ^ 2 == 2
near(sqrt(2) ^ 2, 2)
```
{{</expand>}}

#### 6. coalesce()
각 위치별로 NA가 아닌 값을 첫번째 값을 반환
{{<expand "coalesce 예시">}}
```{r}
library(tidyverse)
a <- NA
b <- 3
c <- 5
coalesce(a,b,c)

# 응용: coalesce를 NA imputation으로 활용하기
x <- sample(c(1:5, NA, NA, NA))
coalesce(x, 0)

y <- c(1, 2, NA, NA, 5)
z <- c(NA, NA, 3, 4, 5)
coalesce(y, z)

vecs <- list(
  c(1, 2, NA, NA, 5),
  c(NA, NA, 3, 4, 5)
)
coalesce(!!!vecs)
```
{{</expand>}}

#### 7. recode()
case_when의 특수한 형태로서 데이터를 교체할 때 사용할 수 있을 것이다.
{{<expand "recode 예시">}}
```{r}
tmp_char <- sample(c("a", "b", "c"), 10, replace = TRUE)
recode(tmp_char, a = "Apple")
recode(tmp_char, a = "Apple", b = "Banana")
recode(tmp_char, a = "Apple", b = "Banana", .default = NA_character_)

# 숫자형은 아래와 같이 ``표시가 들어가야 한다.
tmp_num <- sample(c(1,2,3), 10, replace=TRUE)
recode(tmp_num, `1`=5)

# !!!을 활용하면, python에서 dictionary 형태로 활용하는 것처럼 쓸 수 있다.
level_key <- c(a = "apple", b = "banana", c = "carrot")
recode(tmp_char, !!!level_key)
```
{{</expand>}}

#### 8. first(), last(), nth()
첫번째, 마지막 또는 특정 위치에 있는 요소를 반환하는 함수이다.
{{<expand "first, last, nth 예시">}}
```{r}
x <- 1:10
y <- 10:1

first(x)
last(y)
nth(x, 3)
nth(y, 4)
```
{{</expand>}}

###### 참고
[1] slice와 relocate 예시는 slack `슬기로운통계생활`을 참고하였습니다.